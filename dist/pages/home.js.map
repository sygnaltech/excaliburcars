{
  "version": 3,
  "sources": ["../../src/pages/home.ts"],
  "sourcesContent": ["\n/*\n * Page | Home\n */\n\nimport { IModule } from \"@sygnal/sse\";\n \n\nexport class HomePage implements IModule {\n\n  constructor() {\n  }\n\n  setup() {\n        \n  }\n\n  exec() {\n\n    this.videoUnmute(); \n\n  }\n\n  videoUnmute() {\n\n//    console.log(\"VIDEO PAGE\")\n\n    const playButton = document.getElementById('playButton') as HTMLButtonElement | null;\n//    const mutedButton = document.getElementById('mutedButton') as HTMLButtonElement | null;\n    const videoElement = document.getElementById('video') as HTMLVideoElement | null;\n//    const applyButton = document.getElementById('apply') as HTMLButtonElement | null;\n    \n    if (!playButton || !videoElement) {\n        console.error(\"One or more elements were not found in the DOM.\");\n    } else {\n        console.log(\"video\", videoElement);\n    \n        // Utility function to check if video is playing\n        function isVideoPlaying(video: HTMLVideoElement): boolean {\n            return !!(\n                video.currentTime > 0 &&\n                !video.paused &&\n                !video.ended &&\n                video.readyState > 2\n            );\n        }\n    \n        // Play button click event listener\n        playButton.addEventListener('click', () => {\n            if (isVideoPlaying(videoElement)) {\n                // If video is playing and muted, unmute and restart\n                if (videoElement.muted) {\n                    videoElement.muted = false;\n                    videoElement.currentTime = 0; // Restart video from the beginning\n                    console.log(\"Video unmuted and restarted.\");\n                } else {\n                    // If video is playing and unmuted, pause it\n                    videoElement.pause();\n                    console.log(\"Video paused.\");\n                }\n            } else {\n                // If video is paused or stopped, ensure unmuted and play from current position\n                videoElement.muted = false;\n                videoElement.play()\n                    .then(() => {\n                        console.log(\"Video unmuted and started/resumed playing.\");\n                    })\n                    .catch((error) => {\n                        console.error(\"Error trying to play the video:\", error);\n                    });\n            }\n        });\n\n    }\n\n  }\n\n}\n"],
  "mappings": ";;;AAQO,MAAM,WAAN,MAAkC;AAAA,IAEvC,cAAc;AAAA,IACd;AAAA,IAEA,QAAQ;AAAA,IAER;AAAA,IAEA,OAAO;AAEL,WAAK,YAAY;AAAA,IAEnB;AAAA,IAEA,cAAc;AAIZ,YAAM,aAAa,SAAS,eAAe,YAAY;AAEvD,YAAM,eAAe,SAAS,eAAe,OAAO;AAGpD,UAAI,CAAC,cAAc,CAAC,cAAc;AAC9B,gBAAQ,MAAM,iDAAiD;AAAA,MACnE,OAAO;AAIH,YAASA,kBAAT,SAAwB,OAAkC;AACtD,iBAAO,CAAC,EACJ,MAAM,cAAc,KACpB,CAAC,MAAM,UACP,CAAC,MAAM,SACP,MAAM,aAAa;AAAA,QAE3B;AAPS,6BAAAA;AAHT,gBAAQ,IAAI,SAAS,YAAY;AAajC,mBAAW,iBAAiB,SAAS,MAAM;AACvC,cAAIA,gBAAe,YAAY,GAAG;AAE9B,gBAAI,aAAa,OAAO;AACpB,2BAAa,QAAQ;AACrB,2BAAa,cAAc;AAC3B,sBAAQ,IAAI,8BAA8B;AAAA,YAC9C,OAAO;AAEH,2BAAa,MAAM;AACnB,sBAAQ,IAAI,eAAe;AAAA,YAC/B;AAAA,UACJ,OAAO;AAEH,yBAAa,QAAQ;AACrB,yBAAa,KAAK,EACb,KAAK,MAAM;AACR,sBAAQ,IAAI,4CAA4C;AAAA,YAC5D,CAAC,EACA,MAAM,CAAC,UAAU;AACd,sBAAQ,MAAM,mCAAmC,KAAK;AAAA,YAC1D,CAAC;AAAA,UACT;AAAA,QACJ,CAAC;AAAA,MAEL;AAAA,IAEF;AAAA,EAEF;",
  "names": ["isVideoPlaying"]
}
